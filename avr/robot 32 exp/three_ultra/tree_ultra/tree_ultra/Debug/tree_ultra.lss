
tree_ultra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000945  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050f  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ba  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017c  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8a:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <start>:

volatile  char flag=1;
  //char buff[50];
void start( uint8_t trig)
{  //init trig position , interrupt type and interrupt pin
		 DDRD=0;
  92:	11 ba       	out	0x11, r1	; 17
		 PORTD=0;
  94:	12 ba       	out	0x12, r1	; 18
		TCCR1B=0;
  96:	1e bc       	out	0x2e, r1	; 46

		//case of int1
		 MCUCR|=(1<<ISC10);
  98:	95 b7       	in	r25, 0x35	; 53
  9a:	94 60       	ori	r25, 0x04	; 4
  9c:	95 bf       	out	0x35, r25	; 53
		 GICR|=(1<<INT1);
  9e:	9b b7       	in	r25, 0x3b	; 59
  a0:	90 68       	ori	r25, 0x80	; 128
  a2:	9b bf       	out	0x3b, r25	; 59
		 DDRD|=(1<<trig);
  a4:	91 b3       	in	r25, 0x11	; 17
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	08 2e       	mov	r0, r24
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <start+0x20>
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <start+0x1c>
  b6:	29 2b       	or	r18, r25
  b8:	21 bb       	out	0x11, r18	; 17
		 trig_val=trig;//pass trig to trig signal function
  ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <trig_val>
		 flag=1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	sei();//enable global interrupt
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <TRIG_SIGNAL>:
 	return (secs/2)*343/1000; // mm
	 //return secs;
}
void TRIG_SIGNAL( )
{
	DDRD|=(1<<trig_val);
  c8:	41 b3       	in	r20, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	9c 01       	movw	r18, r24
  d0:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
  d4:	02 c0       	rjmp	.+4      	; 0xda <TRIG_SIGNAL+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <TRIG_SIGNAL+0xe>
  de:	24 2b       	or	r18, r20
  e0:	21 bb       	out	0x11, r18	; 17
	//send trig pulse
	PORTD&=~(1<<trig_val);
  e2:	32 b3       	in	r19, 0x12	; 18
  e4:	ac 01       	movw	r20, r24
  e6:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <TRIG_SIGNAL+0x28>
  ec:	44 0f       	add	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <TRIG_SIGNAL+0x24>
  f4:	24 2f       	mov	r18, r20
  f6:	20 95       	com	r18
  f8:	23 23       	and	r18, r19
  fa:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	00 c0       	rjmp	.+0      	; 0xfe <TRIG_SIGNAL+0x36>
	_delay_us(2);
	PORTD|=(1<<trig_val);
  fe:	42 b3       	in	r20, 0x12	; 18
 100:	9c 01       	movw	r18, r24
 102:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
 106:	02 c0       	rjmp	.+4      	; 0x10c <TRIG_SIGNAL+0x44>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <TRIG_SIGNAL+0x40>
 110:	24 2b       	or	r18, r20
 112:	22 bb       	out	0x12, r18	; 18
 114:	23 e0       	ldi	r18, 0x03	; 3
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <TRIG_SIGNAL+0x4e>
 11a:	00 00       	nop
	_delay_us(10);
	PORTD&=~(1<<trig_val);
 11c:	22 b3       	in	r18, 0x12	; 18
 11e:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
 122:	02 c0       	rjmp	.+4      	; 0x128 <TRIG_SIGNAL+0x60>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <TRIG_SIGNAL+0x5c>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	82 bb       	out	0x12, r24	; 18
		TCCR1B=0;
 132:	1e bc       	out	0x2e, r1	; 46
 134:	08 95       	ret

00000136 <MEASURE_IN_MM>:
}


 uint16_t MEASURE_IN_MM()
{
	TRIG_SIGNAL();
 136:	0e 94 64 00 	call	0xc8	; 0xc8 <TRIG_SIGNAL>
	//timer 1 no prescale lowest time =1/million=.001msec and max =1/million*2^16=65ms
	//lowest time from hc sr04 =150 u sec=.15 m sec ****data sheet****
	//max time from hc sr04 =25 m sec or 18 m sec(will not reach it)****data sheet****
	// no obstacle time= 38 m sec
	 while((flag==0)&&(secs==0)){
 13a:	06 c0       	rjmp	.+12     	; 0x148 <MEASURE_IN_MM+0x12>
		 
		 if (over_flow>=1)
 13c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 140:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 144:	89 2b       	or	r24, r25
 146:	b9 f5       	brne	.+110    	; 0x1b6 <MEASURE_IN_MM+0x80>
	TRIG_SIGNAL();
	//timer 1 no prescale lowest time =1/million=.001msec and max =1/million*2^16=65ms
	//lowest time from hc sr04 =150 u sec=.15 m sec ****data sheet****
	//max time from hc sr04 =25 m sec or 18 m sec(will not reach it)****data sheet****
	// no obstacle time= 38 m sec
	 while((flag==0)&&(secs==0)){
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 14c:	81 11       	cpse	r24, r1
 14e:	06 c0       	rjmp	.+12     	; 0x15c <MEASURE_IN_MM+0x26>
 150:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <secs>
 154:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <secs+0x1>
 158:	89 2b       	or	r24, r25
 15a:	81 f3       	breq	.-32     	; 0x13c <MEASURE_IN_MM+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	83 ed       	ldi	r24, 0xD3	; 211
 15e:	90 e3       	ldi	r25, 0x30	; 48
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <MEASURE_IN_MM+0x2a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <MEASURE_IN_MM+0x30>
 166:	00 00       	nop
		 
	 }

	
 	 _delay_ms(50);
	TCCR1B=0;
 168:	1e bc       	out	0x2e, r1	; 46
	DDRD&=~(1<<trig_val);
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
 174:	02 c0       	rjmp	.+4      	; 0x17a <MEASURE_IN_MM+0x44>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <MEASURE_IN_MM+0x40>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	81 bb       	out	0x11, r24	; 17

 	return (secs/2)*343/1000; // mm
 184:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <secs>
 188:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <secs+0x1>
 18c:	99 23       	and	r25, r25
 18e:	0c f4       	brge	.+2      	; 0x192 <MEASURE_IN_MM+0x5c>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	9c 01       	movw	r18, r24
 194:	35 95       	asr	r19
 196:	27 95       	ror	r18
 198:	47 e5       	ldi	r20, 0x57	; 87
 19a:	51 e0       	ldi	r21, 0x01	; 1
 19c:	24 9f       	mul	r18, r20
 19e:	c0 01       	movw	r24, r0
 1a0:	25 9f       	mul	r18, r21
 1a2:	90 0d       	add	r25, r0
 1a4:	34 9f       	mul	r19, r20
 1a6:	90 0d       	add	r25, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	68 ee       	ldi	r22, 0xE8	; 232
 1ac:	73 e0       	ldi	r23, 0x03	; 3
 1ae:	0e 94 4f 01 	call	0x29e	; 0x29e <__divmodhi4>
 1b2:	cb 01       	movw	r24, r22
 1b4:	08 95       	ret
	 while((flag==0)&&(secs==0)){
		 
		 if (over_flow>=1)
		 {
			 
			 return 444;//in case of wrong connection or any problems (TIMER VALUE WIll NOT OVER FLOW ) ZERO RETURN IN CASE OF OVER FLOW
 1b6:	8c eb       	ldi	r24, 0xBC	; 188
 1b8:	91 e0       	ldi	r25, 0x01	; 1
	TCCR1B=0;
	DDRD&=~(1<<trig_val);

 	return (secs/2)*343/1000; // mm
	 //return secs;
}
 1ba:	08 95       	ret

000001bc <__vector_2>:
	 TCNT1=0;
	 //TCCR1B=0;
}
*/
ISR(INT1_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
	if (flag==1){
 1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	79 f4       	brne	.+30     	; 0x1f0 <__vector_2+0x34>
	TCCR1B|=(1<<CS10);
 1d2:	8e b5       	in	r24, 0x2e	; 46
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE1);
 1d8:	89 b7       	in	r24, 0x39	; 57
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	89 bf       	out	0x39, r24	; 57
	
	TCNT1=0;
 1de:	1d bc       	out	0x2d, r1	; 45
 1e0:	1c bc       	out	0x2c, r1	; 44
	flag=0;
 1e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	secs=0;
 1e6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secs+0x1>
 1ea:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <secs>
 1ee:	11 c0       	rjmp	.+34     	; 0x212 <__vector_2+0x56>
	}
	else
	 {   secs=TCNT1;
 1f0:	8c b5       	in	r24, 0x2c	; 44
 1f2:	9d b5       	in	r25, 0x2d	; 45
 1f4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <secs+0x1>
 1f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <secs>
		 TCCR1B=0;
 1fc:	1e bc       	out	0x2e, r1	; 46
		  
		 flag=1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	     over_flow=0;
 204:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 208:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		TCNT1=0;
 20c:	1d bc       	out	0x2d, r1	; 45
 20e:	1c bc       	out	0x2c, r1	; 44
		TCCR1B=0;
 210:	1e bc       	out	0x2e, r1	; 46
	}
}
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_9>:
		 TCCR1B=0;
		
	}
}*/
ISR(TIMER1_OVF_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
	over_flow=over_flow+1;
 22e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 232:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 23c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	TCNT1=0;
 240:	1d bc       	out	0x2d, r1	; 45
 242:	1c bc       	out	0x2c, r1	; 44
	TCCR1B|=(1<<CS10);
 244:	8e b5       	in	r24, 0x2e	; 46
 246:	81 60       	ori	r24, 0x01	; 1
 248:	8e bd       	out	0x2e, r24	; 46
   DDRB|=(1<<2);
 24a:	ba 9a       	sbi	0x17, 2	; 23
   PORTB^=(1<<2);;//over flow test
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	89 27       	eor	r24, r25
 252:	88 bb       	out	0x18, r24	; 24
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <delay_ms>:
#include "DISTANCE_DETECTOR.h"
#include <util/delay.h>

void delay_ms( int ms )
{
	for (int i = 0; i < ms; i++)
 262:	18 16       	cp	r1, r24
 264:	19 06       	cpc	r1, r25
 266:	6c f4       	brge	.+26     	; 0x282 <delay_ms+0x20>
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	e9 ef       	ldi	r30, 0xF9	; 249
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <delay_ms+0xe>
 274:	00 c0       	rjmp	.+0      	; 0x276 <delay_ms+0x14>
 276:	00 00       	nop
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	28 17       	cp	r18, r24
 27e:	39 07       	cpc	r19, r25
 280:	a9 f7       	brne	.-22     	; 0x26c <delay_ms+0xa>
 282:	08 95       	ret

00000284 <main>:
}

int main(void)
{
    /* Replace with your application code */
    DDRB |= (1<<0);
 284:	b8 9a       	sbi	0x17, 0	; 23
	while (1) 
    {
		
		start(4);
		int dis = MEASURE_IN_MM();
		PORTB^=(1<<0);
 286:	c1 e0       	ldi	r28, 0x01	; 1
    /* Replace with your application code */
    DDRB |= (1<<0);
	while (1) 
    {
		
		start(4);
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	0e 94 49 00 	call	0x92	; 0x92 <start>
		int dis = MEASURE_IN_MM();
 28e:	0e 94 9b 00 	call	0x136	; 0x136 <MEASURE_IN_MM>
		PORTB^=(1<<0);
 292:	28 b3       	in	r18, 0x18	; 24
 294:	2c 27       	eor	r18, r28
 296:	28 bb       	out	0x18, r18	; 24
		delay_ms(dis);
 298:	0e 94 31 01 	call	0x262	; 0x262 <delay_ms>
	
	    }
 29c:	f5 cf       	rjmp	.-22     	; 0x288 <main+0x4>

0000029e <__divmodhi4>:
 29e:	97 fb       	bst	r25, 7
 2a0:	07 2e       	mov	r0, r23
 2a2:	16 f4       	brtc	.+4      	; 0x2a8 <__divmodhi4+0xa>
 2a4:	00 94       	com	r0
 2a6:	07 d0       	rcall	.+14     	; 0x2b6 <__divmodhi4_neg1>
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	09 d0       	rcall	.+18     	; 0x2be <__divmodhi4_neg2>
 2ac:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__udivmodhi4>
 2b0:	07 fc       	sbrc	r0, 7
 2b2:	05 d0       	rcall	.+10     	; 0x2be <__divmodhi4_neg2>
 2b4:	3e f4       	brtc	.+14     	; 0x2c4 <__divmodhi4_exit>

000002b6 <__divmodhi4_neg1>:
 2b6:	90 95       	com	r25
 2b8:	81 95       	neg	r24
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	08 95       	ret

000002be <__divmodhi4_neg2>:
 2be:	70 95       	com	r23
 2c0:	61 95       	neg	r22
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255

000002c4 <__divmodhi4_exit>:
 2c4:	08 95       	ret

000002c6 <__udivmodhi4>:
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	51 e1       	ldi	r21, 0x11	; 17
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__udivmodhi4_ep>

000002ce <__udivmodhi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	a6 17       	cp	r26, r22
 2d4:	b7 07       	cpc	r27, r23
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <__udivmodhi4_ep>
 2d8:	a6 1b       	sub	r26, r22
 2da:	b7 0b       	sbc	r27, r23

000002dc <__udivmodhi4_ep>:
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	5a 95       	dec	r21
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <__udivmodhi4_loop>
 2e4:	80 95       	com	r24
 2e6:	90 95       	com	r25
 2e8:	bc 01       	movw	r22, r24
 2ea:	cd 01       	movw	r24, r26
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
