
ROBOT8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009ee  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  00000a84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6a  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000916  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d8  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b3  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000033db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3f c0       	rjmp	.+126    	; 0x80 <__ctors_end>
   2:	59 c0       	rjmp	.+178    	; 0xb6 <__bad_interrupt>
   4:	df c0       	rjmp	.+446    	; 0x1c4 <__vector_2>
   6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
  10:	29 c1       	rjmp	.+594    	; 0x264 <__vector_8>
  12:	51 c0       	rjmp	.+162    	; 0xb6 <__bad_interrupt>
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	4f c0       	rjmp	.+158    	; 0xb6 <__bad_interrupt>
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	49 c0       	rjmp	.+146    	; 0xb6 <__bad_interrupt>
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	08 00       	.word	0x0008	; ????
  28:	00 00       	nop
  2a:	be 92       	st	-X, r11
  2c:	24 49       	sbci	r18, 0x94	; 148
  2e:	12 3e       	cpi	r17, 0xE2	; 226
  30:	ab aa       	std	Y+51, r10	; 0x33
  32:	aa 2a       	or	r10, r26
  34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
  36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
  38:	4c 3e       	cpi	r20, 0xEC	; 236
  3a:	00 00       	nop
  3c:	00 80       	ld	r0, Z
  3e:	be ab       	std	Y+54, r27	; 0x36
  40:	aa aa       	std	Y+50, r10	; 0x32
  42:	aa 3e       	cpi	r26, 0xEA	; 234
  44:	00 00       	nop
  46:	00 00       	nop
  48:	bf 00       	.word	0x00bf	; ????
  4a:	00 00       	nop
  4c:	80 3f       	cpi	r24, 0xF0	; 240
  4e:	00 00       	nop
  50:	00 00       	nop
  52:	00 08       	sbc	r0, r0
  54:	41 78       	andi	r20, 0x81	; 129
  56:	d3 bb       	out	0x13, r29	; 19
  58:	43 87       	std	Z+11, r20	; 0x0b
  5a:	d1 13       	cpse	r29, r17
  5c:	3d 19       	sub	r19, r13
  5e:	0e 3c       	cpi	r16, 0xCE	; 206
  60:	c3 bd       	out	0x23, r28	; 35
  62:	42 82       	std	Z+2, r4	; 0x02
  64:	ad 2b       	or	r26, r29
  66:	3e 68       	ori	r19, 0x8E	; 142
  68:	ec 82       	std	Y+4, r14	; 0x04
  6a:	76 be       	out	0x36, r7	; 54
  6c:	d9 8f       	std	Y+25, r29	; 0x19
  6e:	e1 a9       	ldd	r30, Z+49	; 0x31
  70:	3e 4c       	sbci	r19, 0xCE	; 206
  72:	80 ef       	ldi	r24, 0xF0	; 240
  74:	ff be       	out	0x3f, r15	; 63
  76:	01 c4       	rjmp	.+2050   	; 0x87a <__mulsf3+0xa>
  78:	ff 7f       	andi	r31, 0xFF	; 255
  7a:	3f 00       	.word	0x003f	; ????
  7c:	00 00       	nop
	...

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf e5       	ldi	r28, 0x5F	; 95
  86:	d4 e0       	ldi	r29, 0x04	; 4
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	ee ee       	ldi	r30, 0xEE	; 238
  94:	f9 e0       	ldi	r31, 0x09	; 9
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 36       	cpi	r26, 0x62	; 98
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	a2 e6       	ldi	r26, 0x62	; 98
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a8 36       	cpi	r26, 0x68	; 104
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	c9 d1       	rcall	.+914    	; 0x446 <main>
  b4:	9a c4       	rjmp	.+2356   	; 0x9ea <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <start>:
volatile  char flag=1;

void start( uint8_t trig)
{  //init trig position , interrupt type and interrupt pin
	 
	DDRD=0;
  b8:	11 ba       	out	0x11, r1	; 17
	PORTD=0;
  ba:	12 ba       	out	0x12, r1	; 18
	// determine the interrupt pin that will be used by knowing which trig will be send
	//case of int1
		 MCUCR|=(1<<ISC10);
  bc:	95 b7       	in	r25, 0x35	; 53
  be:	94 60       	ori	r25, 0x04	; 4
  c0:	95 bf       	out	0x35, r25	; 53
		 GICR|=(1<<INT1);
  c2:	9b b7       	in	r25, 0x3b	; 59
  c4:	90 68       	ori	r25, 0x80	; 128
  c6:	9b bf       	out	0x3b, r25	; 59
		 DDRD|=(1<<trig);
  c8:	91 b3       	in	r25, 0x11	; 17
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	08 2e       	mov	r0, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <start+0x1e>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <start+0x1a>
  da:	29 2b       	or	r18, r25
  dc:	21 bb       	out	0x11, r18	; 17
		 trig_val=trig;//pass trig to trig signal function
  de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <trig_val>
		 flag=1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	sei();//enable global interrupt
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <TRIG_SIGNAL>:
 	return (secs/2)*343/10000;//CONVERSION MISSED XD
}
void TRIG_SIGNAL( )
{
	//send trig pulse
	PORTD|=(1<<trig_val);
  ec:	42 b3       	in	r20, 0x12	; 18
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9c 01       	movw	r18, r24
  f4:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
  f8:	02 c0       	rjmp	.+4      	; 0xfe <TRIG_SIGNAL+0x12>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <TRIG_SIGNAL+0xe>
 102:	24 2b       	or	r18, r20
 104:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	23 e0       	ldi	r18, 0x03	; 3
 108:	2a 95       	dec	r18
 10a:	f1 f7       	brne	.-4      	; 0x108 <TRIG_SIGNAL+0x1c>
 10c:	00 00       	nop
	_delay_us(10);
	PORTD&=~(1<<trig_val);
 10e:	22 b3       	in	r18, 0x12	; 18
 110:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
 114:	02 c0       	rjmp	.+4      	; 0x11a <TRIG_SIGNAL+0x2e>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <TRIG_SIGNAL+0x2a>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	82 bb       	out	0x12, r24	; 18
 124:	8a ef       	ldi	r24, 0xFA	; 250
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <TRIG_SIGNAL+0x3a>
 12a:	08 95       	ret

0000012c <MEASURE_IN_CM>:
}


 uint16_t MEASURE_IN_CM()
{
	TRIG_SIGNAL();
 12c:	df df       	rcall	.-66     	; 0xec <TRIG_SIGNAL>
	//timer 1 no prescale lowest time =1/million=.001msec and max =1/million*2^16=65ms
	//lowest time from hc sr04 =150 u sec=.15 m sec ****data sheet****
	//max time from hc sr04 =25 m sec or 18 m sec(will not reach it)****data sheet****
	// no obstacle time= 38 m sec
 while((flag==0)&&(secs==0)){
 12e:	07 c0       	rjmp	.+14     	; 0x13e <MEASURE_IN_CM+0x12>
	 
	 if (over_flow>=1)
 130:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 134:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 138:	89 2b       	or	r24, r25
 13a:	09 f0       	breq	.+2      	; 0x13e <MEASURE_IN_CM+0x12>
 13c:	40 c0       	rjmp	.+128    	; 0x1be <MEASURE_IN_CM+0x92>
	TRIG_SIGNAL();
	//timer 1 no prescale lowest time =1/million=.001msec and max =1/million*2^16=65ms
	//lowest time from hc sr04 =150 u sec=.15 m sec ****data sheet****
	//max time from hc sr04 =25 m sec or 18 m sec(will not reach it)****data sheet****
	// no obstacle time= 38 m sec
 while((flag==0)&&(secs==0)){
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 142:	81 11       	cpse	r24, r1
 144:	0e c0       	rjmp	.+28     	; 0x162 <MEASURE_IN_CM+0x36>
 146:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <secs>
 14a:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <secs+0x1>
 14e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <secs+0x2>
 152:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <secs+0x3>
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	a9 01       	movw	r20, r18
 15c:	ef d1       	rcall	.+990    	; 0x53c <__cmpsf2>
 15e:	88 23       	and	r24, r24
 160:	39 f3       	breq	.-50     	; 0x130 <MEASURE_IN_CM+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <MEASURE_IN_CM+0x3a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <MEASURE_IN_CM+0x40>
 16c:	00 00       	nop
		 return 0;//in case of wrong connection or any problems (TIMER VALUE WIll NOT OVER FLOW ) ZERO RETURN IN CASE OF OVER FLOW
		 }
	 }
	 
		 _delay_ms(50);
		 TCCR1B=0;
 16e:	1e bc       	out	0x2e, r1	; 46
		 DDRD&=~(1<<trig_val);
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <trig_val>
 17a:	02 c0       	rjmp	.+4      	; 0x180 <MEASURE_IN_CM+0x54>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <MEASURE_IN_CM+0x50>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	81 bb       	out	0x11, r24	; 17


 	return (secs/2)*343/10000;//CONVERSION MISSED XD
 18a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <secs>
 18e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <secs+0x1>
 192:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <secs+0x2>
 196:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <secs+0x3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	5f e3       	ldi	r21, 0x3F	; 63
 1a2:	66 d3       	rcall	.+1740   	; 0x870 <__mulsf3>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e8       	ldi	r19, 0x80	; 128
 1a8:	4b ea       	ldi	r20, 0xAB	; 171
 1aa:	53 e4       	ldi	r21, 0x43	; 67
 1ac:	61 d3       	rcall	.+1730   	; 0x870 <__mulsf3>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e4       	ldi	r19, 0x40	; 64
 1b2:	4c e1       	ldi	r20, 0x1C	; 28
 1b4:	56 e4       	ldi	r21, 0x46	; 70
 1b6:	c6 d1       	rcall	.+908    	; 0x544 <__divsf3>
 1b8:	32 d2       	rcall	.+1124   	; 0x61e <__fixunssfsi>
 1ba:	cb 01       	movw	r24, r22
 1bc:	08 95       	ret
 while((flag==0)&&(secs==0)){
	 
	 if (over_flow>=1)
	 { 
		 
		 return 0;//in case of wrong connection or any problems (TIMER VALUE WIll NOT OVER FLOW ) ZERO RETURN IN CASE OF OVER FLOW
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		 TCCR1B=0;
		 DDRD&=~(1<<trig_val);


 	return (secs/2)*343/10000;//CONVERSION MISSED XD
}
 1c2:	08 95       	ret

000001c4 <__vector_2>:
	_delay_us(750);
	
}

ISR(INT1_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	if (flag==1){
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	99 f4       	brne	.+38     	; 0x214 <__vector_2+0x50>
	TCCR1B|=(1<<CS10);
 1ee:	8e b5       	in	r24, 0x2e	; 46
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE1);
 1f4:	89 b7       	in	r24, 0x39	; 57
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	89 bf       	out	0x39, r24	; 57
	
	TCNT1=0;
 1fa:	1d bc       	out	0x2d, r1	; 45
 1fc:	1c bc       	out	0x2c, r1	; 44
	flag=0;
 1fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	secs=0;
 202:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <secs>
 206:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secs+0x1>
 20a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <secs+0x2>
 20e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <secs+0x3>
 212:	17 c0       	rjmp	.+46     	; 0x242 <__vector_2+0x7e>
	}
	else
	 {   secs=TCNT1;
 214:	6c b5       	in	r22, 0x2c	; 44
 216:	7d b5       	in	r23, 0x2d	; 45
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	2c d2       	rcall	.+1112   	; 0x676 <__floatunsisf>
 21e:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <secs>
 222:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <secs+0x1>
 226:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <secs+0x2>
 22a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <secs+0x3>
		 TCCR1B=0;
 22e:	1e bc       	out	0x2e, r1	; 46
		  
		 flag=1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	     over_flow=0;
 236:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 23a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		TCNT1=0;
 23e:	1d bc       	out	0x2d, r1	; 45
 240:	1c bc       	out	0x2c, r1	; 44
	}
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
	over_flow=over_flow+1;
 272:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 276:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 280:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	TCNT1=0;
 284:	1d bc       	out	0x2d, r1	; 45
 286:	1c bc       	out	0x2c, r1	; 44
	TCCR1B|=(1<<CS10);
 288:	8e b5       	in	r24, 0x2e	; 46
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	8e bd       	out	0x2e, r24	; 46
	DDRC|=(1<<2);
 28e:	a2 9a       	sbi	0x14, 2	; 20
	PORTC^=(1<<2);;//over flow test
 290:	95 b3       	in	r25, 0x15	; 21
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	89 27       	eor	r24, r25
 296:	85 bb       	out	0x15, r24	; 21
	
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <cmd>:
	while (*p!='\0')
	{
		data(*p);
		p++;
	}
}
 2a6:	88 bb       	out	0x18, r24	; 24
 2a8:	15 ba       	out	0x15, r1	; 21
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	8f e4       	ldi	r24, 0x4F	; 79
 2b0:	93 ec       	ldi	r25, 0xC3	; 195
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <cmd+0xc>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <cmd+0x12>
 2b8:	00 00       	nop
 2ba:	15 ba       	out	0x15, r1	; 21
 2bc:	08 95       	ret

000002be <init>:
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	84 bb       	out	0x14, r24	; 20
 2c2:	81 bb       	out	0x11, r24	; 17
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	ee df       	rcall	.-36     	; 0x2a6 <cmd>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	eb df       	rcall	.-42     	; 0x2a6 <cmd>
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	e8 df       	rcall	.-48     	; 0x2a6 <cmd>
 2d6:	8e e0       	ldi	r24, 0x0E	; 14
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	e5 df       	rcall	.-54     	; 0x2a6 <cmd>
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	e2 df       	rcall	.-60     	; 0x2a6 <cmd>
 2e2:	08 95       	ret

000002e4 <data>:
 2e4:	88 bb       	out	0x18, r24	; 24
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	85 bb       	out	0x15, r24	; 21
 2ea:	95 e0       	ldi	r25, 0x05	; 5
 2ec:	95 bb       	out	0x15, r25	; 21
 2ee:	ef e4       	ldi	r30, 0x4F	; 79
 2f0:	f3 ec       	ldi	r31, 0xC3	; 195
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <data+0xe>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <data+0x14>
 2f8:	00 00       	nop
 2fa:	85 bb       	out	0x15, r24	; 21
 2fc:	08 95       	ret

000002fe <reverse>:
	}
	if(put_zero){
		data(48);
	}
}
int reverse(int x){
 2fe:	8f 92       	push	r8
 300:	9f 92       	push	r9
 302:	af 92       	push	r10
 304:	bf 92       	push	r11
 306:	cf 92       	push	r12
 308:	df 92       	push	r13
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
	int i , reversed = 0, size = log10(x)+1;
 318:	bc 01       	movw	r22, r24
 31a:	99 0f       	add	r25, r25
 31c:	88 0b       	sbc	r24, r24
 31e:	99 0b       	sbc	r25, r25
 320:	ac d1       	rcall	.+856    	; 0x67a <__floatsisf>
 322:	5b d2       	rcall	.+1206   	; 0x7da <log10>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e8       	ldi	r20, 0x80	; 128
 32a:	5f e3       	ldi	r21, 0x3F	; 63
 32c:	a3 d0       	rcall	.+326    	; 0x474 <__addsf3>
 32e:	72 d1       	rcall	.+740    	; 0x614 <__fixsfsi>
 330:	4b 01       	movw	r8, r22
 332:	5c 01       	movw	r10, r24
 334:	6b 01       	movw	r12, r22
	for (i = 0; i<size ;i++){
 336:	16 16       	cp	r1, r22
 338:	17 06       	cpc	r1, r23
 33a:	5c f5       	brge	.+86     	; 0x392 <reverse+0x94>
		reversed += x%10;
 33c:	ce 01       	movw	r24, r28
 33e:	6a e0       	ldi	r22, 0x0A	; 10
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	2c d3       	rcall	.+1624   	; 0x99c <__divmodhi4>
 344:	9c 01       	movw	r18, r24
		if (i==size-1){
 346:	74 01       	movw	r14, r8
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	e8 1a       	sub	r14, r24
 34c:	f1 08       	sbc	r15, r1
 34e:	19 f1       	breq	.+70     	; 0x396 <reverse+0x98>
 350:	e0 e0       	ldi	r30, 0x00	; 0
 352:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		}
		reversed *= 10;
		x /= 10;
 354:	0a e0       	ldi	r16, 0x0A	; 10
 356:	10 e0       	ldi	r17, 0x00	; 0
 358:	08 c0       	rjmp	.+16     	; 0x36a <reverse+0x6c>
	}
}
int reverse(int x){
	int i , reversed = 0, size = log10(x)+1;
	for (i = 0; i<size ;i++){
		reversed += x%10;
 35a:	ce 01       	movw	r24, r28
 35c:	b8 01       	movw	r22, r16
 35e:	1e d3       	rcall	.+1596   	; 0x99c <__divmodhi4>
 360:	28 0f       	add	r18, r24
 362:	39 1f       	adc	r19, r25
		if (i==size-1){
 364:	ee 15       	cp	r30, r14
 366:	ff 05       	cpc	r31, r15
 368:	b1 f0       	breq	.+44     	; 0x396 <reverse+0x98>
			break;
		}
		reversed *= 10;
 36a:	c9 01       	movw	r24, r18
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	28 0f       	add	r18, r24
 37e:	39 1f       	adc	r19, r25
		x /= 10;
 380:	ce 01       	movw	r24, r28
 382:	b8 01       	movw	r22, r16
 384:	0b d3       	rcall	.+1558   	; 0x99c <__divmodhi4>
 386:	eb 01       	movw	r28, r22
		data(48);
	}
}
int reverse(int x){
	int i , reversed = 0, size = log10(x)+1;
	for (i = 0; i<size ;i++){
 388:	31 96       	adiw	r30, 0x01	; 1
 38a:	ec 15       	cp	r30, r12
 38c:	fd 05       	cpc	r31, r13
 38e:	29 f7       	brne	.-54     	; 0x35a <reverse+0x5c>
 390:	02 c0       	rjmp	.+4      	; 0x396 <reverse+0x98>
	if(put_zero){
		data(48);
	}
}
int reverse(int x){
	int i , reversed = 0, size = log10(x)+1;
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
		}
		reversed *= 10;
		x /= 10;
	}
	return reversed ;
 396:	c9 01       	movw	r24, r18
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	9f 90       	pop	r9
 3ae:	8f 90       	pop	r8
 3b0:	08 95       	ret

000003b2 <display_int>:
		data(*p);
		p++;
	}
}

void display_int(int value){
 3b2:	8f 92       	push	r8
 3b4:	9f 92       	push	r9
 3b6:	af 92       	push	r10
 3b8:	bf 92       	push	r11
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	9c 01       	movw	r18, r24
	int put_zero = 0;
	if ((value%10)==0){
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	e5 d2       	rcall	.+1482   	; 0x99c <__divmodhi4>
 3d2:	4c 01       	movw	r8, r24
		put_zero = 1;
	}
	
	value = reverse(value);
 3d4:	c9 01       	movw	r24, r18
 3d6:	93 df       	rcall	.-218    	; 0x2fe <reverse>
 3d8:	ec 01       	movw	r28, r24
	
	int i ,size  = log10(value)+1;
 3da:	bc 01       	movw	r22, r24
 3dc:	99 0f       	add	r25, r25
 3de:	88 0b       	sbc	r24, r24
 3e0:	99 0b       	sbc	r25, r25
 3e2:	4b d1       	rcall	.+662    	; 0x67a <__floatsisf>
 3e4:	fa d1       	rcall	.+1012   	; 0x7da <log10>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	40 e8       	ldi	r20, 0x80	; 128
 3ec:	5f e3       	ldi	r21, 0x3F	; 63
 3ee:	42 d0       	rcall	.+132    	; 0x474 <__addsf3>
 3f0:	11 d1       	rcall	.+546    	; 0x614 <__fixsfsi>
 3f2:	6b 01       	movw	r12, r22
	for (i=0;i<size;i++){
 3f4:	16 16       	cp	r1, r22
 3f6:	17 06       	cpc	r1, r23
 3f8:	ac f4       	brge	.+42     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3fa:	00 e0       	ldi	r16, 0x00	; 0
 3fc:	10 e0       	ldi	r17, 0x00	; 0
		data(value%10+48);
 3fe:	0f 2e       	mov	r0, r31
 400:	fa e0       	ldi	r31, 0x0A	; 10
 402:	af 2e       	mov	r10, r31
 404:	b1 2c       	mov	r11, r1
 406:	f0 2d       	mov	r31, r0
 408:	ce 01       	movw	r24, r28
 40a:	b5 01       	movw	r22, r10
 40c:	c7 d2       	rcall	.+1422   	; 0x99c <__divmodhi4>
 40e:	e6 2e       	mov	r14, r22
 410:	f7 2e       	mov	r15, r23
 412:	80 5d       	subi	r24, 0xD0	; 208
 414:	67 df       	rcall	.-306    	; 0x2e4 <data>
		value = value/10;
 416:	ce 2d       	mov	r28, r14
 418:	df 2d       	mov	r29, r15
	}
	
	value = reverse(value);
	
	int i ,size  = log10(value)+1;
	for (i=0;i<size;i++){
 41a:	0f 5f       	subi	r16, 0xFF	; 255
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
 41e:	0c 15       	cp	r16, r12
 420:	1d 05       	cpc	r17, r13
 422:	91 f7       	brne	.-28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		data(value%10+48);
		value = value/10;
	}
	if(put_zero){
 424:	89 28       	or	r8, r9
 426:	11 f4       	brne	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		data(48);
 428:	80 e3       	ldi	r24, 0x30	; 48
 42a:	5c df       	rcall	.-328    	; 0x2e4 <data>
	}
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	8f 90       	pop	r8
 444:	08 95       	ret

00000446 <main>:

int main(void)
{     
	  uint16_t RIGHT=0;
	  uint16_t LEFT=0;
	DDRD=0;
 446:	11 ba       	out	0x11, r1	; 17
	PORTD|=1<<PD3;
 448:	93 9a       	sbi	0x12, 3	; 18
	

    while (1) 
    {
		
		start(PORTD1);
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	35 de       	rcall	.-918    	; 0xb8 <start>
		LEFT=MEASURE_IN_CM();
 44e:	6e de       	rcall	.-804    	; 0x12c <MEASURE_IN_CM>
 450:	ec 01       	movw	r28, r24
 452:	83 ed       	ldi	r24, 0xD3	; 211
 454:	90 e3       	ldi	r25, 0x30	; 48
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <main+0x10>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <main+0x16>
 45c:	00 00       	nop
		
		_delay_ms(50);		 
		 init();
 45e:	2f df       	rcall	.-418    	; 0x2be <init>
		 display_int(LEFT);
 460:	ce 01       	movw	r24, r28
 462:	a7 df       	rcall	.-178    	; 0x3b2 <display_int>
 464:	83 ec       	ldi	r24, 0xC3	; 195
 466:	99 e0       	ldi	r25, 0x09	; 9
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__stack+0xf>
 46e:	00 00       	nop
 470:	ec cf       	rjmp	.-40     	; 0x44a <main+0x4>

00000472 <__subsf3>:
 472:	50 58       	subi	r21, 0x80	; 128

00000474 <__addsf3>:
 474:	bb 27       	eor	r27, r27
 476:	aa 27       	eor	r26, r26
 478:	0e d0       	rcall	.+28     	; 0x496 <__addsf3x>
 47a:	75 c1       	rjmp	.+746    	; 0x766 <__fp_round>
 47c:	66 d1       	rcall	.+716    	; 0x74a <__fp_pscA>
 47e:	30 f0       	brcs	.+12     	; 0x48c <__addsf3+0x18>
 480:	6b d1       	rcall	.+726    	; 0x758 <__fp_pscB>
 482:	20 f0       	brcs	.+8      	; 0x48c <__addsf3+0x18>
 484:	31 f4       	brne	.+12     	; 0x492 <__addsf3+0x1e>
 486:	9f 3f       	cpi	r25, 0xFF	; 255
 488:	11 f4       	brne	.+4      	; 0x48e <__addsf3+0x1a>
 48a:	1e f4       	brtc	.+6      	; 0x492 <__addsf3+0x1e>
 48c:	5b c1       	rjmp	.+694    	; 0x744 <__fp_nan>
 48e:	0e f4       	brtc	.+2      	; 0x492 <__addsf3+0x1e>
 490:	e0 95       	com	r30
 492:	e7 fb       	bst	r30, 7
 494:	51 c1       	rjmp	.+674    	; 0x738 <__fp_inf>

00000496 <__addsf3x>:
 496:	e9 2f       	mov	r30, r25
 498:	77 d1       	rcall	.+750    	; 0x788 <__fp_split3>
 49a:	80 f3       	brcs	.-32     	; 0x47c <__addsf3+0x8>
 49c:	ba 17       	cp	r27, r26
 49e:	62 07       	cpc	r22, r18
 4a0:	73 07       	cpc	r23, r19
 4a2:	84 07       	cpc	r24, r20
 4a4:	95 07       	cpc	r25, r21
 4a6:	18 f0       	brcs	.+6      	; 0x4ae <__addsf3x+0x18>
 4a8:	71 f4       	brne	.+28     	; 0x4c6 <__addsf3x+0x30>
 4aa:	9e f5       	brtc	.+102    	; 0x512 <__addsf3x+0x7c>
 4ac:	8f c1       	rjmp	.+798    	; 0x7cc <__fp_zero>
 4ae:	0e f4       	brtc	.+2      	; 0x4b2 <__addsf3x+0x1c>
 4b0:	e0 95       	com	r30
 4b2:	0b 2e       	mov	r0, r27
 4b4:	ba 2f       	mov	r27, r26
 4b6:	a0 2d       	mov	r26, r0
 4b8:	0b 01       	movw	r0, r22
 4ba:	b9 01       	movw	r22, r18
 4bc:	90 01       	movw	r18, r0
 4be:	0c 01       	movw	r0, r24
 4c0:	ca 01       	movw	r24, r20
 4c2:	a0 01       	movw	r20, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	ff 27       	eor	r31, r31
 4c8:	59 1b       	sub	r21, r25
 4ca:	99 f0       	breq	.+38     	; 0x4f2 <__addsf3x+0x5c>
 4cc:	59 3f       	cpi	r21, 0xF9	; 249
 4ce:	50 f4       	brcc	.+20     	; 0x4e4 <__addsf3x+0x4e>
 4d0:	50 3e       	cpi	r21, 0xE0	; 224
 4d2:	68 f1       	brcs	.+90     	; 0x52e <__addsf3x+0x98>
 4d4:	1a 16       	cp	r1, r26
 4d6:	f0 40       	sbci	r31, 0x00	; 0
 4d8:	a2 2f       	mov	r26, r18
 4da:	23 2f       	mov	r18, r19
 4dc:	34 2f       	mov	r19, r20
 4de:	44 27       	eor	r20, r20
 4e0:	58 5f       	subi	r21, 0xF8	; 248
 4e2:	f3 cf       	rjmp	.-26     	; 0x4ca <__addsf3x+0x34>
 4e4:	46 95       	lsr	r20
 4e6:	37 95       	ror	r19
 4e8:	27 95       	ror	r18
 4ea:	a7 95       	ror	r26
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	53 95       	inc	r21
 4f0:	c9 f7       	brne	.-14     	; 0x4e4 <__addsf3x+0x4e>
 4f2:	7e f4       	brtc	.+30     	; 0x512 <__addsf3x+0x7c>
 4f4:	1f 16       	cp	r1, r31
 4f6:	ba 0b       	sbc	r27, r26
 4f8:	62 0b       	sbc	r22, r18
 4fa:	73 0b       	sbc	r23, r19
 4fc:	84 0b       	sbc	r24, r20
 4fe:	ba f0       	brmi	.+46     	; 0x52e <__addsf3x+0x98>
 500:	91 50       	subi	r25, 0x01	; 1
 502:	a1 f0       	breq	.+40     	; 0x52c <__addsf3x+0x96>
 504:	ff 0f       	add	r31, r31
 506:	bb 1f       	adc	r27, r27
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	c2 f7       	brpl	.-16     	; 0x500 <__addsf3x+0x6a>
 510:	0e c0       	rjmp	.+28     	; 0x52e <__addsf3x+0x98>
 512:	ba 0f       	add	r27, r26
 514:	62 1f       	adc	r22, r18
 516:	73 1f       	adc	r23, r19
 518:	84 1f       	adc	r24, r20
 51a:	48 f4       	brcc	.+18     	; 0x52e <__addsf3x+0x98>
 51c:	87 95       	ror	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f7 95       	ror	r31
 526:	9e 3f       	cpi	r25, 0xFE	; 254
 528:	08 f0       	brcs	.+2      	; 0x52c <__addsf3x+0x96>
 52a:	b3 cf       	rjmp	.-154    	; 0x492 <__addsf3+0x1e>
 52c:	93 95       	inc	r25
 52e:	88 0f       	add	r24, r24
 530:	08 f0       	brcs	.+2      	; 0x534 <__addsf3x+0x9e>
 532:	99 27       	eor	r25, r25
 534:	ee 0f       	add	r30, r30
 536:	97 95       	ror	r25
 538:	87 95       	ror	r24
 53a:	08 95       	ret

0000053c <__cmpsf2>:
 53c:	d9 d0       	rcall	.+434    	; 0x6f0 <__fp_cmp>
 53e:	08 f4       	brcc	.+2      	; 0x542 <__cmpsf2+0x6>
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	08 95       	ret

00000544 <__divsf3>:
 544:	0c d0       	rcall	.+24     	; 0x55e <__divsf3x>
 546:	0f c1       	rjmp	.+542    	; 0x766 <__fp_round>
 548:	07 d1       	rcall	.+526    	; 0x758 <__fp_pscB>
 54a:	40 f0       	brcs	.+16     	; 0x55c <__divsf3+0x18>
 54c:	fe d0       	rcall	.+508    	; 0x74a <__fp_pscA>
 54e:	30 f0       	brcs	.+12     	; 0x55c <__divsf3+0x18>
 550:	21 f4       	brne	.+8      	; 0x55a <__divsf3+0x16>
 552:	5f 3f       	cpi	r21, 0xFF	; 255
 554:	19 f0       	breq	.+6      	; 0x55c <__divsf3+0x18>
 556:	f0 c0       	rjmp	.+480    	; 0x738 <__fp_inf>
 558:	51 11       	cpse	r21, r1
 55a:	39 c1       	rjmp	.+626    	; 0x7ce <__fp_szero>
 55c:	f3 c0       	rjmp	.+486    	; 0x744 <__fp_nan>

0000055e <__divsf3x>:
 55e:	14 d1       	rcall	.+552    	; 0x788 <__fp_split3>
 560:	98 f3       	brcs	.-26     	; 0x548 <__divsf3+0x4>

00000562 <__divsf3_pse>:
 562:	99 23       	and	r25, r25
 564:	c9 f3       	breq	.-14     	; 0x558 <__divsf3+0x14>
 566:	55 23       	and	r21, r21
 568:	b1 f3       	breq	.-20     	; 0x556 <__divsf3+0x12>
 56a:	95 1b       	sub	r25, r21
 56c:	55 0b       	sbc	r21, r21
 56e:	bb 27       	eor	r27, r27
 570:	aa 27       	eor	r26, r26
 572:	62 17       	cp	r22, r18
 574:	73 07       	cpc	r23, r19
 576:	84 07       	cpc	r24, r20
 578:	38 f0       	brcs	.+14     	; 0x588 <__divsf3_pse+0x26>
 57a:	9f 5f       	subi	r25, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	22 0f       	add	r18, r18
 580:	33 1f       	adc	r19, r19
 582:	44 1f       	adc	r20, r20
 584:	aa 1f       	adc	r26, r26
 586:	a9 f3       	breq	.-22     	; 0x572 <__divsf3_pse+0x10>
 588:	33 d0       	rcall	.+102    	; 0x5f0 <__divsf3_pse+0x8e>
 58a:	0e 2e       	mov	r0, r30
 58c:	3a f0       	brmi	.+14     	; 0x59c <__divsf3_pse+0x3a>
 58e:	e0 e8       	ldi	r30, 0x80	; 128
 590:	30 d0       	rcall	.+96     	; 0x5f2 <__divsf3_pse+0x90>
 592:	91 50       	subi	r25, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	e6 95       	lsr	r30
 598:	00 1c       	adc	r0, r0
 59a:	ca f7       	brpl	.-14     	; 0x58e <__divsf3_pse+0x2c>
 59c:	29 d0       	rcall	.+82     	; 0x5f0 <__divsf3_pse+0x8e>
 59e:	fe 2f       	mov	r31, r30
 5a0:	27 d0       	rcall	.+78     	; 0x5f0 <__divsf3_pse+0x8e>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	bb 1f       	adc	r27, r27
 5aa:	26 17       	cp	r18, r22
 5ac:	37 07       	cpc	r19, r23
 5ae:	48 07       	cpc	r20, r24
 5b0:	ab 07       	cpc	r26, r27
 5b2:	b0 e8       	ldi	r27, 0x80	; 128
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <__divsf3_pse+0x56>
 5b6:	bb 0b       	sbc	r27, r27
 5b8:	80 2d       	mov	r24, r0
 5ba:	bf 01       	movw	r22, r30
 5bc:	ff 27       	eor	r31, r31
 5be:	93 58       	subi	r25, 0x83	; 131
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	2a f0       	brmi	.+10     	; 0x5ce <__divsf3_pse+0x6c>
 5c4:	9e 3f       	cpi	r25, 0xFE	; 254
 5c6:	51 05       	cpc	r21, r1
 5c8:	68 f0       	brcs	.+26     	; 0x5e4 <__divsf3_pse+0x82>
 5ca:	b6 c0       	rjmp	.+364    	; 0x738 <__fp_inf>
 5cc:	00 c1       	rjmp	.+512    	; 0x7ce <__fp_szero>
 5ce:	5f 3f       	cpi	r21, 0xFF	; 255
 5d0:	ec f3       	brlt	.-6      	; 0x5cc <__divsf3_pse+0x6a>
 5d2:	98 3e       	cpi	r25, 0xE8	; 232
 5d4:	dc f3       	brlt	.-10     	; 0x5cc <__divsf3_pse+0x6a>
 5d6:	86 95       	lsr	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b7 95       	ror	r27
 5de:	f7 95       	ror	r31
 5e0:	9f 5f       	subi	r25, 0xFF	; 255
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__divsf3_pse+0x74>
 5e4:	88 0f       	add	r24, r24
 5e6:	91 1d       	adc	r25, r1
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret
 5f0:	e1 e0       	ldi	r30, 0x01	; 1
 5f2:	66 0f       	add	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	bb 1f       	adc	r27, r27
 5fa:	62 17       	cp	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	ba 07       	cpc	r27, r26
 602:	20 f0       	brcs	.+8      	; 0x60c <__divsf3_pse+0xaa>
 604:	62 1b       	sub	r22, r18
 606:	73 0b       	sbc	r23, r19
 608:	84 0b       	sbc	r24, r20
 60a:	ba 0b       	sbc	r27, r26
 60c:	ee 1f       	adc	r30, r30
 60e:	88 f7       	brcc	.-30     	; 0x5f2 <__divsf3_pse+0x90>
 610:	e0 95       	com	r30
 612:	08 95       	ret

00000614 <__fixsfsi>:
 614:	04 d0       	rcall	.+8      	; 0x61e <__fixunssfsi>
 616:	68 94       	set
 618:	b1 11       	cpse	r27, r1
 61a:	d9 c0       	rjmp	.+434    	; 0x7ce <__fp_szero>
 61c:	08 95       	ret

0000061e <__fixunssfsi>:
 61e:	bc d0       	rcall	.+376    	; 0x798 <__fp_splitA>
 620:	88 f0       	brcs	.+34     	; 0x644 <__fixunssfsi+0x26>
 622:	9f 57       	subi	r25, 0x7F	; 127
 624:	90 f0       	brcs	.+36     	; 0x64a <__fixunssfsi+0x2c>
 626:	b9 2f       	mov	r27, r25
 628:	99 27       	eor	r25, r25
 62a:	b7 51       	subi	r27, 0x17	; 23
 62c:	a0 f0       	brcs	.+40     	; 0x656 <__fixunssfsi+0x38>
 62e:	d1 f0       	breq	.+52     	; 0x664 <__fixunssfsi+0x46>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a f0       	brmi	.+6      	; 0x640 <__fixunssfsi+0x22>
 63a:	ba 95       	dec	r27
 63c:	c9 f7       	brne	.-14     	; 0x630 <__fixunssfsi+0x12>
 63e:	12 c0       	rjmp	.+36     	; 0x664 <__fixunssfsi+0x46>
 640:	b1 30       	cpi	r27, 0x01	; 1
 642:	81 f0       	breq	.+32     	; 0x664 <__fixunssfsi+0x46>
 644:	c3 d0       	rcall	.+390    	; 0x7cc <__fp_zero>
 646:	b1 e0       	ldi	r27, 0x01	; 1
 648:	08 95       	ret
 64a:	c0 c0       	rjmp	.+384    	; 0x7cc <__fp_zero>
 64c:	67 2f       	mov	r22, r23
 64e:	78 2f       	mov	r23, r24
 650:	88 27       	eor	r24, r24
 652:	b8 5f       	subi	r27, 0xF8	; 248
 654:	39 f0       	breq	.+14     	; 0x664 <__fixunssfsi+0x46>
 656:	b9 3f       	cpi	r27, 0xF9	; 249
 658:	cc f3       	brlt	.-14     	; 0x64c <__fixunssfsi+0x2e>
 65a:	86 95       	lsr	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b3 95       	inc	r27
 662:	d9 f7       	brne	.-10     	; 0x65a <__fixunssfsi+0x3c>
 664:	3e f4       	brtc	.+14     	; 0x674 <__fixunssfsi+0x56>
 666:	90 95       	com	r25
 668:	80 95       	com	r24
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__floatunsisf>:
 676:	e8 94       	clt
 678:	09 c0       	rjmp	.+18     	; 0x68c <__floatsisf+0x12>

0000067a <__floatsisf>:
 67a:	97 fb       	bst	r25, 7
 67c:	3e f4       	brtc	.+14     	; 0x68c <__floatsisf+0x12>
 67e:	90 95       	com	r25
 680:	80 95       	com	r24
 682:	70 95       	com	r23
 684:	61 95       	neg	r22
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	99 23       	and	r25, r25
 68e:	a9 f0       	breq	.+42     	; 0x6ba <__floatsisf+0x40>
 690:	f9 2f       	mov	r31, r25
 692:	96 e9       	ldi	r25, 0x96	; 150
 694:	bb 27       	eor	r27, r27
 696:	93 95       	inc	r25
 698:	f6 95       	lsr	r31
 69a:	87 95       	ror	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f1 11       	cpse	r31, r1
 6a4:	f8 cf       	rjmp	.-16     	; 0x696 <__floatsisf+0x1c>
 6a6:	fa f4       	brpl	.+62     	; 0x6e6 <__floatsisf+0x6c>
 6a8:	bb 0f       	add	r27, r27
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__floatsisf+0x36>
 6ac:	60 ff       	sbrs	r22, 0
 6ae:	1b c0       	rjmp	.+54     	; 0x6e6 <__floatsisf+0x6c>
 6b0:	6f 5f       	subi	r22, 0xFF	; 255
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	8f 4f       	sbci	r24, 0xFF	; 255
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <__floatsisf+0x6c>
 6ba:	88 23       	and	r24, r24
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <__floatsisf+0x48>
 6be:	96 e9       	ldi	r25, 0x96	; 150
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <__floatsisf+0x6a>
 6c2:	77 23       	and	r23, r23
 6c4:	21 f0       	breq	.+8      	; 0x6ce <__floatsisf+0x54>
 6c6:	9e e8       	ldi	r25, 0x8E	; 142
 6c8:	87 2f       	mov	r24, r23
 6ca:	76 2f       	mov	r23, r22
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <__floatsisf+0x5e>
 6ce:	66 23       	and	r22, r22
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__floatsisf+0x74>
 6d2:	96 e8       	ldi	r25, 0x86	; 134
 6d4:	86 2f       	mov	r24, r22
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	2a f0       	brmi	.+10     	; 0x6e6 <__floatsisf+0x6c>
 6dc:	9a 95       	dec	r25
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	da f7       	brpl	.-10     	; 0x6dc <__floatsisf+0x62>
 6e6:	88 0f       	add	r24, r24
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__fp_cmp>:
 6f0:	99 0f       	add	r25, r25
 6f2:	00 08       	sbc	r0, r0
 6f4:	55 0f       	add	r21, r21
 6f6:	aa 0b       	sbc	r26, r26
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	fe ef       	ldi	r31, 0xFE	; 254
 6fc:	16 16       	cp	r1, r22
 6fe:	17 06       	cpc	r1, r23
 700:	e8 07       	cpc	r30, r24
 702:	f9 07       	cpc	r31, r25
 704:	c0 f0       	brcs	.+48     	; 0x736 <__fp_cmp+0x46>
 706:	12 16       	cp	r1, r18
 708:	13 06       	cpc	r1, r19
 70a:	e4 07       	cpc	r30, r20
 70c:	f5 07       	cpc	r31, r21
 70e:	98 f0       	brcs	.+38     	; 0x736 <__fp_cmp+0x46>
 710:	62 1b       	sub	r22, r18
 712:	73 0b       	sbc	r23, r19
 714:	84 0b       	sbc	r24, r20
 716:	95 0b       	sbc	r25, r21
 718:	39 f4       	brne	.+14     	; 0x728 <__fp_cmp+0x38>
 71a:	0a 26       	eor	r0, r26
 71c:	61 f0       	breq	.+24     	; 0x736 <__fp_cmp+0x46>
 71e:	23 2b       	or	r18, r19
 720:	24 2b       	or	r18, r20
 722:	25 2b       	or	r18, r21
 724:	21 f4       	brne	.+8      	; 0x72e <__fp_cmp+0x3e>
 726:	08 95       	ret
 728:	0a 26       	eor	r0, r26
 72a:	09 f4       	brne	.+2      	; 0x72e <__fp_cmp+0x3e>
 72c:	a1 40       	sbci	r26, 0x01	; 1
 72e:	a6 95       	lsr	r26
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	81 1d       	adc	r24, r1
 734:	81 1d       	adc	r24, r1
 736:	08 95       	ret

00000738 <__fp_inf>:
 738:	97 f9       	bld	r25, 7
 73a:	9f 67       	ori	r25, 0x7F	; 127
 73c:	80 e8       	ldi	r24, 0x80	; 128
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	08 95       	ret

00000744 <__fp_nan>:
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	80 ec       	ldi	r24, 0xC0	; 192
 748:	08 95       	ret

0000074a <__fp_pscA>:
 74a:	00 24       	eor	r0, r0
 74c:	0a 94       	dec	r0
 74e:	16 16       	cp	r1, r22
 750:	17 06       	cpc	r1, r23
 752:	18 06       	cpc	r1, r24
 754:	09 06       	cpc	r0, r25
 756:	08 95       	ret

00000758 <__fp_pscB>:
 758:	00 24       	eor	r0, r0
 75a:	0a 94       	dec	r0
 75c:	12 16       	cp	r1, r18
 75e:	13 06       	cpc	r1, r19
 760:	14 06       	cpc	r1, r20
 762:	05 06       	cpc	r0, r21
 764:	08 95       	ret

00000766 <__fp_round>:
 766:	09 2e       	mov	r0, r25
 768:	03 94       	inc	r0
 76a:	00 0c       	add	r0, r0
 76c:	11 f4       	brne	.+4      	; 0x772 <__fp_round+0xc>
 76e:	88 23       	and	r24, r24
 770:	52 f0       	brmi	.+20     	; 0x786 <__fp_round+0x20>
 772:	bb 0f       	add	r27, r27
 774:	40 f4       	brcc	.+16     	; 0x786 <__fp_round+0x20>
 776:	bf 2b       	or	r27, r31
 778:	11 f4       	brne	.+4      	; 0x77e <__fp_round+0x18>
 77a:	60 ff       	sbrs	r22, 0
 77c:	04 c0       	rjmp	.+8      	; 0x786 <__fp_round+0x20>
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	08 95       	ret

00000788 <__fp_split3>:
 788:	57 fd       	sbrc	r21, 7
 78a:	90 58       	subi	r25, 0x80	; 128
 78c:	44 0f       	add	r20, r20
 78e:	55 1f       	adc	r21, r21
 790:	59 f0       	breq	.+22     	; 0x7a8 <__fp_splitA+0x10>
 792:	5f 3f       	cpi	r21, 0xFF	; 255
 794:	71 f0       	breq	.+28     	; 0x7b2 <__fp_splitA+0x1a>
 796:	47 95       	ror	r20

00000798 <__fp_splitA>:
 798:	88 0f       	add	r24, r24
 79a:	97 fb       	bst	r25, 7
 79c:	99 1f       	adc	r25, r25
 79e:	61 f0       	breq	.+24     	; 0x7b8 <__fp_splitA+0x20>
 7a0:	9f 3f       	cpi	r25, 0xFF	; 255
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <__fp_splitA+0x2a>
 7a4:	87 95       	ror	r24
 7a6:	08 95       	ret
 7a8:	12 16       	cp	r1, r18
 7aa:	13 06       	cpc	r1, r19
 7ac:	14 06       	cpc	r1, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	f2 cf       	rjmp	.-28     	; 0x796 <__fp_split3+0xe>
 7b2:	46 95       	lsr	r20
 7b4:	f1 df       	rcall	.-30     	; 0x798 <__fp_splitA>
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <__fp_splitA+0x30>
 7b8:	16 16       	cp	r1, r22
 7ba:	17 06       	cpc	r1, r23
 7bc:	18 06       	cpc	r1, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	f1 cf       	rjmp	.-30     	; 0x7a4 <__fp_splitA+0xc>
 7c2:	86 95       	lsr	r24
 7c4:	71 05       	cpc	r23, r1
 7c6:	61 05       	cpc	r22, r1
 7c8:	08 94       	sec
 7ca:	08 95       	ret

000007cc <__fp_zero>:
 7cc:	e8 94       	clt

000007ce <__fp_szero>:
 7ce:	bb 27       	eor	r27, r27
 7d0:	66 27       	eor	r22, r22
 7d2:	77 27       	eor	r23, r23
 7d4:	cb 01       	movw	r24, r22
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <log10>:
 7da:	0a d0       	rcall	.+20     	; 0x7f0 <log>
 7dc:	29 ed       	ldi	r18, 0xD9	; 217
 7de:	3b e5       	ldi	r19, 0x5B	; 91
 7e0:	4e ed       	ldi	r20, 0xDE	; 222
 7e2:	5e e3       	ldi	r21, 0x3E	; 62
 7e4:	45 c0       	rjmp	.+138    	; 0x870 <__mulsf3>
 7e6:	0e f0       	brts	.+2      	; 0x7ea <log10+0x10>
 7e8:	a6 c0       	rjmp	.+332    	; 0x936 <__fp_mpack>
 7ea:	ac cf       	rjmp	.-168    	; 0x744 <__fp_nan>
 7ec:	68 94       	set
 7ee:	a4 cf       	rjmp	.-184    	; 0x738 <__fp_inf>

000007f0 <log>:
 7f0:	d3 df       	rcall	.-90     	; 0x798 <__fp_splitA>
 7f2:	c8 f3       	brcs	.-14     	; 0x7e6 <log10+0xc>
 7f4:	99 23       	and	r25, r25
 7f6:	d1 f3       	breq	.-12     	; 0x7ec <log10+0x12>
 7f8:	c6 f3       	brts	.-16     	; 0x7ea <log10+0x10>
 7fa:	df 93       	push	r29
 7fc:	cf 93       	push	r28
 7fe:	1f 93       	push	r17
 800:	0f 93       	push	r16
 802:	ff 92       	push	r15
 804:	c9 2f       	mov	r28, r25
 806:	dd 27       	eor	r29, r29
 808:	88 23       	and	r24, r24
 80a:	2a f0       	brmi	.+10     	; 0x816 <log+0x26>
 80c:	21 97       	sbiw	r28, 0x01	; 1
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	da f7       	brpl	.-10     	; 0x80c <log+0x1c>
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	40 e8       	ldi	r20, 0x80	; 128
 81c:	5f eb       	ldi	r21, 0xBF	; 191
 81e:	9f e3       	ldi	r25, 0x3F	; 63
 820:	88 39       	cpi	r24, 0x98	; 152
 822:	20 f0       	brcs	.+8      	; 0x82c <log+0x3c>
 824:	80 3e       	cpi	r24, 0xE0	; 224
 826:	30 f0       	brcs	.+12     	; 0x834 <log+0x44>
 828:	21 96       	adiw	r28, 0x01	; 1
 82a:	8f 77       	andi	r24, 0x7F	; 127
 82c:	23 de       	rcall	.-954    	; 0x474 <__addsf3>
 82e:	e6 e2       	ldi	r30, 0x26	; 38
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	03 c0       	rjmp	.+6      	; 0x83a <log+0x4a>
 834:	1f de       	rcall	.-962    	; 0x474 <__addsf3>
 836:	e3 e5       	ldi	r30, 0x53	; 83
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	8b d0       	rcall	.+278    	; 0x952 <__fp_powser>
 83c:	8b 01       	movw	r16, r22
 83e:	be 01       	movw	r22, r28
 840:	ec 01       	movw	r28, r24
 842:	fb 2e       	mov	r15, r27
 844:	6f 57       	subi	r22, 0x7F	; 127
 846:	71 09       	sbc	r23, r1
 848:	75 95       	asr	r23
 84a:	77 1f       	adc	r23, r23
 84c:	88 0b       	sbc	r24, r24
 84e:	99 0b       	sbc	r25, r25
 850:	14 df       	rcall	.-472    	; 0x67a <__floatsisf>
 852:	28 e1       	ldi	r18, 0x18	; 24
 854:	32 e7       	ldi	r19, 0x72	; 114
 856:	41 e3       	ldi	r20, 0x31	; 49
 858:	5f e3       	ldi	r21, 0x3F	; 63
 85a:	16 d0       	rcall	.+44     	; 0x888 <__mulsf3x>
 85c:	af 2d       	mov	r26, r15
 85e:	98 01       	movw	r18, r16
 860:	ae 01       	movw	r20, r28
 862:	ff 90       	pop	r15
 864:	0f 91       	pop	r16
 866:	1f 91       	pop	r17
 868:	cf 91       	pop	r28
 86a:	df 91       	pop	r29
 86c:	14 de       	rcall	.-984    	; 0x496 <__addsf3x>
 86e:	7b cf       	rjmp	.-266    	; 0x766 <__fp_round>

00000870 <__mulsf3>:
 870:	0b d0       	rcall	.+22     	; 0x888 <__mulsf3x>
 872:	79 cf       	rjmp	.-270    	; 0x766 <__fp_round>
 874:	6a df       	rcall	.-300    	; 0x74a <__fp_pscA>
 876:	28 f0       	brcs	.+10     	; 0x882 <__mulsf3+0x12>
 878:	6f df       	rcall	.-290    	; 0x758 <__fp_pscB>
 87a:	18 f0       	brcs	.+6      	; 0x882 <__mulsf3+0x12>
 87c:	95 23       	and	r25, r21
 87e:	09 f0       	breq	.+2      	; 0x882 <__mulsf3+0x12>
 880:	5b cf       	rjmp	.-330    	; 0x738 <__fp_inf>
 882:	60 cf       	rjmp	.-320    	; 0x744 <__fp_nan>
 884:	11 24       	eor	r1, r1
 886:	a3 cf       	rjmp	.-186    	; 0x7ce <__fp_szero>

00000888 <__mulsf3x>:
 888:	7f df       	rcall	.-258    	; 0x788 <__fp_split3>
 88a:	a0 f3       	brcs	.-24     	; 0x874 <__mulsf3+0x4>

0000088c <__mulsf3_pse>:
 88c:	95 9f       	mul	r25, r21
 88e:	d1 f3       	breq	.-12     	; 0x884 <__mulsf3+0x14>
 890:	95 0f       	add	r25, r21
 892:	50 e0       	ldi	r21, 0x00	; 0
 894:	55 1f       	adc	r21, r21
 896:	62 9f       	mul	r22, r18
 898:	f0 01       	movw	r30, r0
 89a:	72 9f       	mul	r23, r18
 89c:	bb 27       	eor	r27, r27
 89e:	f0 0d       	add	r31, r0
 8a0:	b1 1d       	adc	r27, r1
 8a2:	63 9f       	mul	r22, r19
 8a4:	aa 27       	eor	r26, r26
 8a6:	f0 0d       	add	r31, r0
 8a8:	b1 1d       	adc	r27, r1
 8aa:	aa 1f       	adc	r26, r26
 8ac:	64 9f       	mul	r22, r20
 8ae:	66 27       	eor	r22, r22
 8b0:	b0 0d       	add	r27, r0
 8b2:	a1 1d       	adc	r26, r1
 8b4:	66 1f       	adc	r22, r22
 8b6:	82 9f       	mul	r24, r18
 8b8:	22 27       	eor	r18, r18
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	62 1f       	adc	r22, r18
 8c0:	73 9f       	mul	r23, r19
 8c2:	b0 0d       	add	r27, r0
 8c4:	a1 1d       	adc	r26, r1
 8c6:	62 1f       	adc	r22, r18
 8c8:	83 9f       	mul	r24, r19
 8ca:	a0 0d       	add	r26, r0
 8cc:	61 1d       	adc	r22, r1
 8ce:	22 1f       	adc	r18, r18
 8d0:	74 9f       	mul	r23, r20
 8d2:	33 27       	eor	r19, r19
 8d4:	a0 0d       	add	r26, r0
 8d6:	61 1d       	adc	r22, r1
 8d8:	23 1f       	adc	r18, r19
 8da:	84 9f       	mul	r24, r20
 8dc:	60 0d       	add	r22, r0
 8de:	21 1d       	adc	r18, r1
 8e0:	82 2f       	mov	r24, r18
 8e2:	76 2f       	mov	r23, r22
 8e4:	6a 2f       	mov	r22, r26
 8e6:	11 24       	eor	r1, r1
 8e8:	9f 57       	subi	r25, 0x7F	; 127
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	8a f0       	brmi	.+34     	; 0x910 <__mulsf3_pse+0x84>
 8ee:	e1 f0       	breq	.+56     	; 0x928 <__mulsf3_pse+0x9c>
 8f0:	88 23       	and	r24, r24
 8f2:	4a f0       	brmi	.+18     	; 0x906 <__mulsf3_pse+0x7a>
 8f4:	ee 0f       	add	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	bb 1f       	adc	r27, r27
 8fa:	66 1f       	adc	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	91 50       	subi	r25, 0x01	; 1
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	a9 f7       	brne	.-22     	; 0x8f0 <__mulsf3_pse+0x64>
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	51 05       	cpc	r21, r1
 90a:	70 f0       	brcs	.+28     	; 0x928 <__mulsf3_pse+0x9c>
 90c:	15 cf       	rjmp	.-470    	; 0x738 <__fp_inf>
 90e:	5f cf       	rjmp	.-322    	; 0x7ce <__fp_szero>
 910:	5f 3f       	cpi	r21, 0xFF	; 255
 912:	ec f3       	brlt	.-6      	; 0x90e <__mulsf3_pse+0x82>
 914:	98 3e       	cpi	r25, 0xE8	; 232
 916:	dc f3       	brlt	.-10     	; 0x90e <__mulsf3_pse+0x82>
 918:	86 95       	lsr	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b7 95       	ror	r27
 920:	f7 95       	ror	r31
 922:	e7 95       	ror	r30
 924:	9f 5f       	subi	r25, 0xFF	; 255
 926:	c1 f7       	brne	.-16     	; 0x918 <__mulsf3_pse+0x8c>
 928:	fe 2b       	or	r31, r30
 92a:	88 0f       	add	r24, r24
 92c:	91 1d       	adc	r25, r1
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__fp_mpack>:
 936:	9f 3f       	cpi	r25, 0xFF	; 255
 938:	31 f0       	breq	.+12     	; 0x946 <__fp_mpack_finite+0xc>

0000093a <__fp_mpack_finite>:
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	20 f4       	brcc	.+8      	; 0x946 <__fp_mpack_finite+0xc>
 93e:	87 95       	ror	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b7 95       	ror	r27
 946:	88 0f       	add	r24, r24
 948:	91 1d       	adc	r25, r1
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	97 f9       	bld	r25, 7
 950:	08 95       	ret

00000952 <__fp_powser>:
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	1f 93       	push	r17
 958:	0f 93       	push	r16
 95a:	ff 92       	push	r15
 95c:	ef 92       	push	r14
 95e:	df 92       	push	r13
 960:	7b 01       	movw	r14, r22
 962:	8c 01       	movw	r16, r24
 964:	68 94       	set
 966:	05 c0       	rjmp	.+10     	; 0x972 <__fp_powser+0x20>
 968:	da 2e       	mov	r13, r26
 96a:	ef 01       	movw	r28, r30
 96c:	8d df       	rcall	.-230    	; 0x888 <__mulsf3x>
 96e:	fe 01       	movw	r30, r28
 970:	e8 94       	clt
 972:	a5 91       	lpm	r26, Z+
 974:	25 91       	lpm	r18, Z+
 976:	35 91       	lpm	r19, Z+
 978:	45 91       	lpm	r20, Z+
 97a:	55 91       	lpm	r21, Z+
 97c:	ae f3       	brts	.-22     	; 0x968 <__fp_powser+0x16>
 97e:	ef 01       	movw	r28, r30
 980:	8a dd       	rcall	.-1260   	; 0x496 <__addsf3x>
 982:	fe 01       	movw	r30, r28
 984:	97 01       	movw	r18, r14
 986:	a8 01       	movw	r20, r16
 988:	da 94       	dec	r13
 98a:	79 f7       	brne	.-34     	; 0x96a <__fp_powser+0x18>
 98c:	df 90       	pop	r13
 98e:	ef 90       	pop	r14
 990:	ff 90       	pop	r15
 992:	0f 91       	pop	r16
 994:	1f 91       	pop	r17
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <__divmodhi4>:
 99c:	97 fb       	bst	r25, 7
 99e:	07 2e       	mov	r0, r23
 9a0:	16 f4       	brtc	.+4      	; 0x9a6 <__divmodhi4+0xa>
 9a2:	00 94       	com	r0
 9a4:	06 d0       	rcall	.+12     	; 0x9b2 <__divmodhi4_neg1>
 9a6:	77 fd       	sbrc	r23, 7
 9a8:	08 d0       	rcall	.+16     	; 0x9ba <__divmodhi4_neg2>
 9aa:	0b d0       	rcall	.+22     	; 0x9c2 <__udivmodhi4>
 9ac:	07 fc       	sbrc	r0, 7
 9ae:	05 d0       	rcall	.+10     	; 0x9ba <__divmodhi4_neg2>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__divmodhi4_exit>

000009b2 <__divmodhi4_neg1>:
 9b2:	90 95       	com	r25
 9b4:	81 95       	neg	r24
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__divmodhi4_neg2>:
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255

000009c0 <__divmodhi4_exit>:
 9c0:	08 95       	ret

000009c2 <__udivmodhi4>:
 9c2:	aa 1b       	sub	r26, r26
 9c4:	bb 1b       	sub	r27, r27
 9c6:	51 e1       	ldi	r21, 0x11	; 17
 9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <__udivmodhi4_ep>

000009ca <__udivmodhi4_loop>:
 9ca:	aa 1f       	adc	r26, r26
 9cc:	bb 1f       	adc	r27, r27
 9ce:	a6 17       	cp	r26, r22
 9d0:	b7 07       	cpc	r27, r23
 9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__udivmodhi4_ep>
 9d4:	a6 1b       	sub	r26, r22
 9d6:	b7 0b       	sbc	r27, r23

000009d8 <__udivmodhi4_ep>:
 9d8:	88 1f       	adc	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	5a 95       	dec	r21
 9de:	a9 f7       	brne	.-22     	; 0x9ca <__udivmodhi4_loop>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	bc 01       	movw	r22, r24
 9e6:	cd 01       	movw	r24, r26
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
